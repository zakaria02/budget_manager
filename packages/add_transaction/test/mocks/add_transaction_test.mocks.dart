// Mocks generated by Mockito 5.3.2 from annotations
// in add_transaction/test/add_transaction_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:add_transaction/business/data_source/add_transaction_service.dart'
    as _i4;
import '../../../category/lib/add_category/business/dto/category_dto.dart'
    as _i3;
import 'package:add_transaction/business/dto/transaction_dto.dart' as _i6;
import 'package:add_transaction/business/repository/add_transaction_repository.dart'
    as _i7;
import 'package:common/common.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseResponse_0 extends _i1.SmartFake
    implements _i2.FirebaseResponse {
  _FakeFirebaseResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCategoryDTO_1 extends _i1.SmartFake implements _i3.CategoryDTO {
  _FakeCategoryDTO_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_2 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AddTransactionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTransactionService extends _i1.Mock
    implements _i4.AddTransactionService {
  MockAddTransactionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.FirebaseResponse> addTransaction(
          _i6.TransactionDTO? transactionDTO) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransaction,
          [transactionDTO],
        ),
        returnValue:
            _i5.Future<_i2.FirebaseResponse>.value(_FakeFirebaseResponse_0(
          this,
          Invocation.method(
            #addTransaction,
            [transactionDTO],
          ),
        )),
      ) as _i5.Future<_i2.FirebaseResponse>);
}

/// A class which mocks [AddTransactionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTransactionRepository extends _i1.Mock
    implements _i7.AddTransactionRepository {
  MockAddTransactionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.FirebaseResponse> addTransaction(
          _i6.TransactionDTO? transactionDTO) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransaction,
          [transactionDTO],
        ),
        returnValue:
            _i5.Future<_i2.FirebaseResponse>.value(_FakeFirebaseResponse_0(
          this,
          Invocation.method(
            #addTransaction,
            [transactionDTO],
          ),
        )),
      ) as _i5.Future<_i2.FirebaseResponse>);
}

/// A class which mocks [TransactionDTO].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionDTO extends _i1.Mock implements _i6.TransactionDTO {
  MockTransactionDTO() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.TransactionType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i6.TransactionType.income,
      ) as _i6.TransactionType);
  @override
  set type(_i6.TransactionType? _type) => super.noSuchMethod(
        Invocation.setter(
          #type,
          _type,
        ),
        returnValueForMissingStub: null,
      );
  @override
  double get amount => (super.noSuchMethod(
        Invocation.getter(#amount),
        returnValue: 0.0,
      ) as double);
  @override
  set amount(double? _amount) => super.noSuchMethod(
        Invocation.setter(
          #amount,
          _amount,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.CategoryDTO get category => (super.noSuchMethod(
        Invocation.getter(#category),
        returnValue: _FakeCategoryDTO_1(
          this,
          Invocation.getter(#category),
        ),
      ) as _i3.CategoryDTO);
  @override
  set category(_i3.CategoryDTO? _category) => super.noSuchMethod(
        Invocation.setter(
          #category,
          _category,
        ),
        returnValueForMissingStub: null,
      );
  @override
  DateTime get date => (super.noSuchMethod(
        Invocation.getter(#date),
        returnValue: _FakeDateTime_2(
          this,
          Invocation.getter(#date),
        ),
      ) as DateTime);
  @override
  set date(DateTime? _date) => super.noSuchMethod(
        Invocation.setter(
          #date,
          _date,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get accountType => (super.noSuchMethod(
        Invocation.getter(#accountType),
        returnValue: '',
      ) as String);
  @override
  set accountType(String? _accountType) => super.noSuchMethod(
        Invocation.setter(
          #accountType,
          _accountType,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i6.RepeatingType get repeatingType => (super.noSuchMethod(
        Invocation.getter(#repeatingType),
        returnValue: _i6.RepeatingType.never,
      ) as _i6.RepeatingType);
  @override
  set repeatingType(_i6.RepeatingType? _repeatingType) => super.noSuchMethod(
        Invocation.setter(
          #repeatingType,
          _repeatingType,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get notes => (super.noSuchMethod(
        Invocation.getter(#notes),
        returnValue: '',
      ) as String);
  @override
  set notes(String? _notes) => super.noSuchMethod(
        Invocation.setter(
          #notes,
          _notes,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
